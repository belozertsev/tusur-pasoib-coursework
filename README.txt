Название программы:
«Пример веб-приложения, реализующего дискреционную модель доступа к данным».

Итоговая работа представляет собой клиент-серверное приложение и состоит
из трех основных подсистем:
- Серверное приложение (NodeJS с использованием Express.js).
- Клиентское приложение (с использованием React).
- База данных (SQLite).

Конечные точки серверной части приложения (http endpoints):
(Тип)		(Адрес HTTP-запроса)		(Назначение)
GET		/api/posts/:username		Получение постов пользователя
POST		/api/posts/:username		Создание нового поста
PUT		/api/posts/:id			Изменение конкретного поста
DELETE		/api/posts/:id			Удаление конкретного поста
GET		/api/settings			Получение настроек доступа пользователя (матрицы доступа)
POST		/api/settings			Изменение матрицы доступа
POST		/api/settings/check		Получение инофрмации об определенном разрешении
POST		/api/settings/add		Добавление нового правила (нового субъекта) в матрицу доступа
GET		/api/friends			Получение списка всех пользователей, определивших права доступа для текущего пользователя

Для запуска (вводить команды по порядку):
```
	cd frontend
	npm install

	cd ../backend
	npm install
	npm run start
```

Приложение будет запущено на 80 порту (если в переменных окружения не задан иной).
В '/backend' есть файл базы данных с уже готовыми таблицами и файл refreshDB.js с командами для сброса БД к тестовому состоянию.

pz_compressed - Пояснительная записка к курсовой работе
